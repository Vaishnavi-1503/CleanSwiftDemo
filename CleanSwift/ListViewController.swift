//
//  ListViewController.swift
//  CleanSwift
//
//  Created by vaishanavi.sasane on 13/08/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: AnyObject {
    func displayUser(viewModel: [User])
    func displayFailure(viewModel: List.ListEntities.ViewModelFailure)
}

class ListViewController: UIViewController, ListDisplayLogic, UITableViewDelegate, UITableViewDataSource {
    
    /// Variables
    var interactor: ListBusinessLogic?
    var router: (NSObjectProtocol & ListRoutingLogic)?
    
    private let tableView: UITableView = {
        let table = UITableView()
        table.register(UITableViewCell.self, forCellReuseIdentifier: CellIdentifiers.defaultCell)
        table.isHidden = true
        return table
    }()
    
    var users: [User] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup Clean Code Design Pattern
    
    private func setup() {
        let viewController = self
        let interactor = ListInteractor()
        let presenter = ListPresenter()
        let router = ListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    // MARK: - Routing
    /*
    // It is optional
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
     */
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(tableView)
        self.tableView.delegate = self
        self.tableView.dataSource = self
        fetchData()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        tableView.frame = view.bounds
    }
    
    // MARK: - request data from ListInteractor
    func fetchData() {
        let request = List.ListEntities.Request(username: "", password: "")
        interactor?.fetchUserData(request: request)
    }
    
    // MARK: - display view model from ListPresenter
    /// Display user list
    func displayUser(viewModel: [User]) {
        DispatchQueue.main.async {
            self.users = viewModel
            self.tableView.reloadData()
            self.tableView.isHidden = false
        }
    }
    
    /// Display error
    func displayFailure(viewModel: List.ListEntities.ViewModelFailure) {
        debugPrint(viewModel.errorMessage)
    }
}

/// TableView - Delagate & Datasource
extension ListViewController {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return users.count
    }
        
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifiers.defaultCell, for: indexPath)
        cell.textLabel?.text = self.users[indexPath.row].name
        return cell
    }
}
